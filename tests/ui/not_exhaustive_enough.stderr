error: enum match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:62:11
   |
LL |     match default_enum {
   |           ^^^^^^^^^^^^ help: try adding missing variants: `DefaultEnum::Third`
   |
   = note: `-D clippy::not-exhaustive-enough` implied by `-D warnings`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:69:9
   |
LL |         StructVariantEnum1::V { a: _, .. } => {},
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `b: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:73:9
   |
LL |         StructVariantEnum2::V { a: _, .. } => {},
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `b: _`

error: enum match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:82:11
   |
LL |     match data_enum {
   |           ^^^^^^^^^ help: try adding missing variants: `DataEnum::Third`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:90:9
   |
LL |     let DefaultStruct { a: _, b: _, .. } = DefaultStruct::default();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `c: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:93:9
   |
LL |         DefaultStruct { a: 42, b: 21, .. } => {},
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `c: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:94:9
   |
LL |         DefaultStruct { a: _, b: _, .. } => {},
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `c: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:97:12
   |
LL |     if let DefaultStruct { a: 42, b: _, .. } = DefaultStruct::default() {}
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `c: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:101:9
   |
LL |     for DefaultStruct { a: _, b: _, .. } in v {}
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `c: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:103:15
   |
LL |     while let DefaultStruct { a: 42, b: _, .. } = DefaultStruct::default() {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `c: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:107:19
   |
LL |     pub fn take_s(DefaultStruct { a, b, .. }: DefaultStruct) -> (i32, i32) {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `c: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:113:9
   |
LL |     let DefaultTuple { 0: _, 1: _, .. } = DefaultTuple::default();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `2: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:116:9
   |
LL |         DefaultTuple { 0: 42, 1: 21, .. } => {},
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `2: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:117:9
   |
LL |         DefaultTuple { 0: _, 1: _, .. } => {},
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `2: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:120:12
   |
LL |     if let DefaultTuple { 0: 42, 1: _, .. } = DefaultTuple::default() {}
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `2: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:123:9
   |
LL |     for DefaultTuple { 0: _, 1: _, .. } in default_tuple {}
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `2: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:125:15
   |
LL |     while let DefaultTuple { 0: 42, 1: _, .. } = DefaultTuple::default() {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `2: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:129:19
   |
LL |     pub fn take_t(DefaultTuple { 0: _, 1: _, .. }: DefaultTuple) -> (i32, i32) {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `2: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:143:9
   |
LL |         TPrivateField { 1: 21, .. } => {},
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `0: _`

error: enum match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:164:11
   |
LL |     match another_crate_enum {
   |           ^^^^^^^^^^^^^^^^^^ help: try adding missing variants: `not_exhaustive_enough_helper::AnotherCrateEnum::ASecond , not_exhaustive_enough_helper::AnotherCrateEnum::AThird`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:171:9
   |
LL |     let AnotherCrateStruct { a1: _, b1: _, .. } = AnotherCrateStruct::default();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `c1: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:174:9
   |
LL |         AnotherCrateStruct { a1: 42, b1: 21, .. } => {},
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `c1: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:175:9
   |
LL |         AnotherCrateStruct { a1: _, b1: _, .. } => {},
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `c1: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:178:12
   |
LL |     if let AnotherCrateStruct { a1: 42, b1: _, .. } = AnotherCrateStruct::default() {}
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `c1: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:182:9
   |
LL |     for AnotherCrateStruct { a1: _, b1: _, .. } in a_v {}
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `c1: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:184:15
   |
LL |     while let AnotherCrateStruct { a1: 42, b1: _, .. } = AnotherCrateStruct::default() {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `c1: _`

error: struct match is not exhaustive enough
  --> $DIR/not_exhaustive_enough.rs:188:21
   |
LL |     pub fn take_a_s(AnotherCrateStruct { a1, b1, .. }: AnotherCrateStruct) -> (i32, i32) {
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try adding missing fields: `c1: _`

error: aborting due to 27 previous errors

